# this is a test file

# Imports
import matplotlib.pyplot as plt
import numpy as np

# Constants
G = 6.6743e-11
M_sun = 1.989e30    # kg

# Initial Position and Velocity

r_0 =  np.array([147.1e9, 0])    # m
v_0 =  np.array([0, -30.29e3])   # m/s


# Time steps and total time for simulation
dt = 3600           # s
t_max = 3.154e7     # secs


# Time array to be used in numerical solution
t = np.arange(0, t_max, dt)
# print(t.astype('int32'))     # uncomment this line to test


# Initialize arrays to store positions and velocities at all the time steps
r = np.empty(shape=(len(t), 2))
v = np.empty(shape=(len(t), 2))


# Set the Initial conditions for position and velocity
r[0], v[0] = r_0, v_0

# Drine the function that gets us the  acceleration (accn) vector when passed in the
# position vector

def accn(r):
    return(-G * M_sun / np.linalg.norm(r)**3) * r

"""
# print(accn(r_0))    # uncomment this line to test
  
    
# Euler Integration
def euler_method(r, v, accn, dt):
    
    

        for i in range(1, len(t)):
            r[i] = r[i-1] + v[i-1] * dt
            v[i] = v[i-1] + accn(r[i-1]) * dt
            
        
        
    euler_method(r, v, accn, dt)  # uncomment these 2 lines to test
    print(r)                      # uncomment these 2 lines to test

    '''

# Apply the Euler Integration on the given conditions

euler_method(r, v, accn, dt)

    """


# RK4 Integration
def rk4_method(r, v, accn, dt):
    
    for i in range(1, len(r)):
        
        # Step 1: 0
        k1v =  accn(r[i-1])
        k1r =  v[i-1]
    
        # Step 2:  dt/2 using step 1
        k2v =  accn(r[i-1] + k1r * dt/2)
        k2r =  v[i-1] + k1v * dt/2
    
        # Step 3:  dt/2 using step 2
        k3v =   accn(r[i-1] + k2r * dt/2)
        k3r =   v[i-1] + k2v * dt/2
    
        # Step 4:  dt using step 3
        k4v =   accn(r[i-1] + k3r * dt)
        k4r =   v[i-1] + k3v * dt

        # Update the r and v
        
        v[i] = r[i-1] + dt/6*(k1v + 2*k2v + 2*k3v + k4v)
        r[i] = r[i-1] + dt/6*(k1r + 2*k2r + 2*k3r + k4r)
 
rk4_method(r, v, accn, dt)     
# Find the point at which Earth is at its Aphelion
sizes = np.array([np.linalg.norm(position) for position in r])
pos_aphelion = np.max(sizes)
arg_aphelion = np.argmax(sizes)
vel_aphelion = np.linalg.norm(v[arg_aphelion])

print("looking goodso far !!!!")
print(pos_aphelion / 1e9, vel_aphelion / 1e3)   # uncomment this line to test
